% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/butter.parallel.R
\name{butter.parallel}
\alias{butter.parallel}
\title{The butter function takes in a dataframe with 'words' and 'activation' columns, and
calls the spread function for a specific number of times to simulate the spread of
activation of a given initial activation space (specified in start_time) over time.}
\usage{
butter.parallel(start_run, decay = 0.2, retention = 0, suppress = 0.1,
  network = gc.net, time = 10)
}
\arguments{
\item{start_run}{A non-empty dataframe with 'words' and 'activation' columns. Must be specified.}

\item{decay}{Proportion of activation that is lost at each time step. Default is 20%.}

\item{retention}{Proportion of activation that remains in the node, ranges from 0 to 1. Default is 0.}

\item{suppress}{Suppress nodes with total final activation of < x units at each time step. Recommended value of x is 0.1% of initial activation of target at t = 0. Default is 0.1.}

\item{network}{Network where the spreading occurs. Must be specified. Default is gc.net.}

\item{time}{Number of time steps to run spread function for. Default is 10.}
}
\value{
A compiled dataframe with 'words', 'activation' and 'time' columns showing the spread of activation in the network over time.
}
\description{
Note: butter.decay() is a modified function of butter.retention() and calls the parallelized
spread.decay.parallel() function for faster processing. The main difference is that spread.decay()
specifies decay rate, d, which the rate at which activation is lost at each time step. Use the
estimate.time() function to figure out the number of time steps required for total activation in
the network to decrease to 10% of its value at t = 0.
}
\examples{
See Vignette for examples.
}
